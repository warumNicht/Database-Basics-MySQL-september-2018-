1. Records’ Count
SELECT COUNT(`id`) AS `count`
FROM wizzard_deposits;

2.	 Longest Magic Wand
SELECT MAX(d.magic_wand_size) AS `longest magic wand`
FROM wizzard_deposits AS d;

3. Longest Magic Wand per Deposit Groups
SELECT d.deposit_group, MAX(d.magic_wand_size) AS `longest magic wand`
FROM wizzard_deposits AS d
GROUP BY d.deposit_group
ORDER BY `longest magic wand` , deposit_group;

4.	 Smallest Deposit Group per Magic Wand Size*
SELECT d.deposit_group
FROM wizzard_deposits AS d
GROUP BY d.deposit_group
ORDER BY AVG(d.magic_wand_size) 
LIMIT 1;

5.	 Deposits Sum
SELECT d.deposit_group, SUM(d.deposit_amount) AS `total_sum`
FROM wizzard_deposits AS d
GROUP BY d.deposit_group
ORDER BY `total_sum`;

6.	 Deposits Sum for Ollivander family
SELECT d.deposit_group, SUM(d.deposit_amount) AS `total_sum`
FROM wizzard_deposits AS d
WHERE d.magic_wand_creator='Ollivander family'
GROUP BY d.deposit_group
ORDER BY d.deposit_group;

7.	Deposits Filter
SELECT d.deposit_group, SUM(d.deposit_amount) AS `total_sum`
FROM wizzard_deposits AS d
WHERE d.magic_wand_creator='Ollivander family'
GROUP BY d.deposit_group
HAVING `total_sum`<150000
ORDER BY `total_sum` DESC;

8.	 Deposit charge
SELECT d.deposit_group,d.magic_wand_creator,
MIN(d.deposit_charge) AS `min_deposit_charge`
FROM wizzard_deposits AS d
GROUP BY d.deposit_group,d.magic_wand_creator
ORDER BY d.magic_wand_creator, d.deposit_group;

9. Age Groups
SELECT
CASE
	WHEN w.age<=10 THEN '[0-10]'
	WHEN w.age<=20 THEN '[11-20]'
	WHEN w.age<=30 THEN '[21-30]'
	WHEN w.age<=40 THEN '[31-40]'
	WHEN w.age<=50 THEN '[41-50]'
	WHEN w.age<=60 THEN '[51-60]'
	ELSE '[61+]'
	END AS `age_group`,
	COUNT(*) AS `wizard_count`
FROM `wizzard_deposits` AS w
GROUP BY `age_group`
ORDER BY `wizard_count`;

10. First Letter
SELECT LEFT(d.first_name,1) AS `first_letter`
FROM wizzard_deposits AS d
WHERE d.deposit_group='Troll Chest'
GROUP BY `first_letter`
ORDER BY `first_letter`;

11.	Average Interest 
SELECT w.deposit_group, w.is_deposit_expired, AVG(w.deposit_interest) AS `average_interest`
FROM wizzard_deposits AS w
WHERE w.deposit_start_date>'1985/01/01'
GROUP BY w.deposit_group,w.is_deposit_expired
ORDER BY w.deposit_group DESC,w.is_deposit_expired, w.deposit_expiration_date;

12.	Rich Wizard, Poor Wizard*
SELECT SUM(one.deposit_amount - two.deposit_amount ) AS `sum`
FROM wizzard_deposits AS one,
wizzard_deposits AS two
WHERE two.id-one.id=1;

13.	 Employees Minimum Salaries
SELECT e.department_id, MIN(e.salary) AS `minimum_salary`
FROM employees AS e
WHERE e.department_id IN (2,5,7) AND DATE(e.hire_date)>'2000-01-01'
GROUP BY e.department_id
ORDER BY e.department_id;

14.	Employees Average Salaries
CREATE TABLE `mannschaft` AS
SELECT * FROM employees
WHERE salary>30000;

DELETE FROM mannschaft
WHERE manager_id=42;

UPDATE mannschaft
SET salary=salary+5000
WHERE department_id=1;

SELECT m.department_id, AVG(m.salary) AS `avg_salary`
FROM mannschaft AS m
GROUP BY m.department_id
ORDER BY m.department_id;

15. Employees Maximum Salaries
SELECT e.department_id, MAX(e.salary) AS `max_salary`
FROM employees AS e
GROUP BY e.department_id
HAVING `max_salary`<30000 OR `max_salary`>70000
ORDER BY e.department_id;

16.	Employees Count Salaries
SELECT COUNT(e.employee_id) -COUNT(e.manager_id) AS num
FROM employees AS e;
//second solution
SELECT COUNT(e.employee_id)  AS num
FROM employees AS e
WHERE ISNULL(e.manager_id);


17.	3rd Highest Salary*
SELECT e.department_id, 

( SELECT DISTINCT e2.salary 
FROM employees AS e2
WHERE e2.department_id=e.department_id
ORDER BY e2.salary DESC LIMIT 2 ,1) AS `thirt`  // or LIMIT 1 OFFSET 2

FROM employees AS e

GROUP BY e.department_id
HAVING  `thirt` IS NOT NULL
ORDER BY e.department_id;


18.	 Salary Challenge**
SELECT e.first_name,e.last_name,e.department_id
FROM employees AS e
JOIN (SELECT e2.department_id, AVG(e2.salary)AS `departm_ev_sal`
  FROM employees AS e2
  GROUP BY e2.department_id) AS `table2`
  ON e.department_id=table2.department_id
WHERE e.salary>`departm_ev_sal`

ORDER BY e.department_id LIMIT 10;

19.	Departments Total Salaries
SELECT e.department_id, SUM(e.salary)
FROM employees AS e
GROUP BY e.department_id
ORDER BY e.department_id;
