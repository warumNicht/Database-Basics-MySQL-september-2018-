CREATE TABLE users(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(30) UNIQUE NOT NULL,
`password` VARCHAR(30) NOT NULL,
`email` VARCHAR(50) NOT NULL
);

CREATE TABLE repositories(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL
);


CREATE TABLE repositories_contributors(
repository_id INT(11) ,
contributor_id INT(11),
CONSTRAINT fk_rep_contr_repositoty_id FOREIGN KEY (repository_id) REFERENCES repositories(id),
CONSTRAINT fk_rep_contr_contributor_id FOREIGN KEY (contributor_id) REFERENCES users(id)
);

CREATE TABLE issues(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(255) NOT NULL,
issue_status VARCHAR(6) NOT NULL,
repository_id INT(11) NOT NULL,
assignee_id INT(11) NOT NULL,
CONSTRAINT fk_issue_repository_id FOREIGN KEY (repository_id) REFERENCES repositories(id),
CONSTRAINT fk_issue_user_id FOREIGN KEY (assignee_id) REFERENCES users(id)
);

CREATE TABLE commits(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
message VARCHAR(255) NOT NULL,
issue_id INT(11),
repository_id INT(11) NOT NULL,
contributor_id INT(11) NOT NULL,
CONSTRAINT fk_commit_issue_id FOREIGN KEY (issue_id) REFERENCES issues(id),
CONSTRAINT fk_commit_repository_id FOREIGN KEY (repository_id) REFERENCES repositories(id),
CONSTRAINT fk_commit_contributor_id FOREIGN KEY (contributor_id) REFERENCES users(id)
);

CREATE TABLE files(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(100) NOT NULL,
size DECIMAL(10,2) NOT NULL,
parent_id INT(11) ,
commit_id INT(11) NOT NULL,
CONSTRAINT fk_file_parent_id FOREIGN KEY (parent_id) REFERENCES files(id),
CONSTRAINT fk_file_commit_id FOREIGN KEY (commit_id) REFERENCES commits(id)
);

//2
INSERT INTO issues (title,issue_status, repository_id,assignee_id)
(SELECT CONCAT('Critical Problem With ',f.name,'!'),'open',CEIL(f.id*2/3),c.contributor_id
FROM files AS f
JOIN commits AS c ON c.id=f.commit_id
WHERE f.id BETWEEN 46 AND 50);

//3
UPDATE repositories_contributors
SET repository_id=IFNULL( 

(SELECT * FROM (SELECT r.id
FROM repositories AS r
LEFT JOIN repositories_contributors AS rc ON rc.repository_id=r.id
WHERE ISNULL(rc.repository_id) LIMIT 1) AS ze)
, repository_id)

WHERE contributor_id IN (SELECT * FROM(SELECT u.id
FROM users AS u
JOIN repositories_contributors AS r ON u.id=r.contributor_id
WHERE r.repository_id=u.id) AS we) AND contributor_id=repository_id;


3 B
UPDATE repositories_contributors  AS rc
SET rc.repository_id=  

(SELECT rep.id
FROM repositories AS rep
WHERE rep.id NOT IN(SELECT repository_id 
FROM ( SELECT repository_id FROM repositories_contributors ) AS a)
ORDER BY  rep.id LIMIT 1) 

WHERE rc.repository_id=rc.contributor_id ;

//4
DELETE FROM  repositories_contributors 
WHERE repository_id IN(SELECT r.id
FROM repositories AS r
LEFT JOIN issues AS i ON r.id=i.repository_id
WHERE ISNULL(i.repository_id));

DELETE FROM  repositories
WHERE id IN(SELECT * FROM(SELECT r.id
FROM repositories AS r
LEFT JOIN issues AS i ON r.id=i.repository_id
WHERE ISNULL(i.repository_id)) AS w);

//5
SELECT u.id,u.username
FROM users AS u
ORDER BY u.id;

//6
SELECT u.repository_id,u.contributor_id
FROM repositories_contributors AS u
WHERE u.repository_id=u.contributor_id
ORDER BY u.repository_id

//7
SELECT f.id,f.name,f.size
FROM files AS f
WHERE f.size>1000 AND f.name LIKE '%html%'
ORDER BY f.size DESC

//8
SELECT i.id,CONCAT(u.username,' : ',i.title)
FROM issues AS i
JOIN users AS u ON i.assignee_id=u.id
ORDER BY i.id DESC;

//9***
SELECT f.id, f.name, CONCAT(f.size,'KB')
FROM files AS f
WHERE f.id NOT IN(SELECT f2.parent_id
FROM files AS f2
WHERE NOT ISNULL(f2.parent_id))
ORDER BY f.id

//9B!!!!!!
SELECT f2.id,f2.name,CONCAT(f2.size,'KB')
FROM files AS f
RIGHT JOIN files AS f2 ON f.parent_id=f2.id
WHERE ISNULL(f.id)
ORDER BY f2.id;

//10
SELECT r.id,r.name, COUNT(i.id) AS coint
FROM repositories  AS r
LEFT JOIN issues AS i ON i.repository_id=r.id
GROUP BY r.id
ORDER BY coint DESC,r.id LIMIT 5;

//11
SELECT r.id,r.name, COUNT(DISTINCT(c.id)) AS `commits`,COUNT(DISTINCT(rc.contributor_id)) AS `contributors`
FROM repositories  AS r
LEFT JOIN commits AS c ON c.repository_id=r.id
LEFT JOIN repositories_contributors AS rc ON r.id=rc.repository_id
GROUP BY r.id
ORDER BY `contributors` DESC, r.id LIMIT 1;

//12****
SELECT u2.id,u2.username,

IFNULL((SELECT COUNT(c.id) 
FROM users AS u
LEFT JOIN commits AS c ON c.contributor_id=u.id
LEFT  JOIN issues AS i ON i.id=c.issue_id 
WHERE i.assignee_id=u2.id AND c.contributor_id=u2.id
GROUP BY u.id
),0) AS cont
FROM users AS u2
ORDER BY cont DESC, u2.id;

12 B
SELECT u.id,u.username, COUNT(c.id)  AS cont
FROM users AS u
LEFT JOIN issues AS i ON u.id=i.assignee_id 
LEFT JOIN commits AS c ON i.id=c.issue_id AND c.contributor_id=u.id
GROUP BY u.id
ORDER BY cont DESC, u.id;


//13
SELECT SUBSTRING_INDEX(fil.name,'.',1 ), (SELECT COUNT(c.id)
FROM commits AS c 
WHERE c.message LIKE CONCAT('%',fil.name,'%'))

FROM files  AS fil
WHERE fil.id IN (SELECT f.id
FROM files AS f
JOIN files AS f2 ON f.id=f2.parent_id AND f.parent_id=f2.id
WHERE f.id!=f2.id
ORDER BY f.name)

13 B
SELECT SUBSTRING_INDEX(f.name,'.',1 ), COUNT(c.id)
FROM files  AS f
JOIN files AS f2 ON f.id=f2.parent_id AND f.parent_id=f2.id AND f.id!=f2.id
LEFT JOIN commits AS c ON c.message LIKE CONCAT('%',f.name,'%')
GROUP BY f.id
ORDER BY f.name;


//14****
SELECT r.id,r.name, COUNT(DISTINCT(u.id)) AS count_users
FROM repositories AS r
LEFT JOIN commits AS c ON r.id=c.repository_id
LEFT JOIN users AS u ON u.id=c.contributor_id
GROUP BY r.id
ORDER BY count_users DESC, r.id

14 B
SELECT r.id,r.name, COUNT(DISTINCT(c.contributor_id)) AS count_users
FROM repositories AS r
LEFT JOIN commits AS c ON r.id=c.repository_id
GROUP BY r.id
ORDER BY count_users DESC, r.id;



//15***да видя защо не рабпти declare int
CREATE PROCEDURE udp_commit(username VARCHAR(30),`password` VARCHAR(30),message VARCHAR(255),issue_id INT(11)) 
BEGIN

 IF NOT EXISTS (SELECT u.id FROM users AS u WHERE u.username=username)  
     THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'No such user!';
    END IF;
    
     IF NOT EXISTS (SELECT u.id FROM users AS u WHERE u.password=`password`)  
     THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Password is incorrect!';
    END IF;
    
    IF NOT EXISTS (SELECT i.id FROM issues AS i WHERE i.id=issue_id)  
     THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'The issue does not exist!';
    END IF;
    
    INSERT INTO commits (message,issue_id,repository_id,contributor_id)
    
    VALUES (message, issue_id, (SELECT i.repository_id FROM issues AS i WHERE i.id=issue_id),
	  (SELECT u.id FROM users AS u WHERE u.password=`password`) );

END

//16
DROP PROCEDURE IF EXISTS udp_findbyextension ;
DELIMITER $$
CREATE PROCEDURE udp_findbyextension(extention VARCHAR(30)) 

BEGIN
    
SELECT f.id,f.name, CONCAT(f.size,'KB')
FROM files AS f 
WHERE f.name LIKE CONCAT('%.',extention);
    
END $$


