//0

CREATE TABLE planets(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(30) NOT NULL
);

CREATE TABLE spaceports(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL,
planet_id INT(11) ,
CONSTRAINT fk_spaceport_planet_id
FOREIGN KEY (planet_id) REFERENCES planets(id)
);

CREATE TABLE spaceships(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL,
manufacturer VARCHAR(30) NOT NULL,
light_speed_rate INT(11) NOT NULL DEFAULT 0
);

CREATE TABLE colonists(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
ucn CHAR(10) NOT NULL UNIQUE,
birth_date DATE NOT NULL
);

CREATE TABLE journeys(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
journey_start DATETIME NOT NULL,
journey_end DATETIME NOT NULL,
purpose ENUM('Medical','Technical','Educational','Military') NOT NULL,
destination_spaceport_id INT(11) ,
spaceship_id INT(11),

CONSTRAINT fk_journeys_destination_spaceport_id
FOREIGN KEY (destination_spaceport_id) REFERENCES spaceports(id),

CONSTRAINT fk_journeys_spaceship_id
FOREIGN KEY (spaceship_id) REFERENCES spaceships(id)

);

CREATE TABLE travel_cards(
id INT(11) PRIMARY KEY AUTO_INCREMENT,
card_number CHAR(10) NOT NULL UNIQUE,
job_during_journey ENUM('Pilot','Engineer','Trooper','Cleaner','Cook') NOT NULL,
colonist_id INT(11) ,
journey_id INT(11),

CONSTRAINT fk_card_colonist_id
FOREIGN KEY (colonist_id) REFERENCES colonists(id),

CONSTRAINT fk_card_journey_id
FOREIGN KEY (journey_id) REFERENCES journeys(id)

);

//01.	Data Insertion

INSERT INTO travel_cards(card_number,job_during_journey,colonist_id, journey_id)
(SELECT 
CASE

WHEN c.birth_date>'1980-01-01' THEN CONCAT(YEAR(c.birth_date),DAY(c.birth_date),LEFT(c.ucn,4))
ELSE  CONCAT(YEAR(c.birth_date),MONTH(c.birth_date),RIGHT(c.ucn,4))

END ,
CASE

WHEN c.id%2=0 THEN 'Pilot'
WHEN c.id%3=0 THEN 'Cook'
ELSE  'Engineer'

END ,c.id, LEFT(c.ucn,1)

FROM colonists AS c
WHERE c.id BETWEEN 96 AND 100);

//02.	Data Update
UPDATE journeys
SET purpose=
CASE
WHEN id%2=0 THEN 'Medical'
WHEN id%3=0 THEN 'Technical'
WHEN id%5=0 THEN 'Educational'
WHEN id%7=0 THEN 'Military'
ELSE purpose
END;

//03.	Data Deletion
DELETE FROM colonists
WHERE id NOT IN(SELECT t.colonist_id
FROM travel_cards AS t);

//04.Extract all travel cards
SELECT t.card_number, t.job_during_journey
FROM travel_cards AS t 
ORDER BY t.card_number;

//05. Extract all colonists
SELECT c.id,CONCAT_WS(' ',c.first_name,c.last_name), c.ucn
FROM colonists AS c
ORDER BY c.first_name,c.last_name,c.ucn;

//06.	Extract all military journeys
SELECT j.id,j.journey_start,j.journey_end
FROM journeys AS j
WHERE j.purpose='Military'
ORDER BY j.journey_start;

//07.	Extract all pilots
SELECT c.id,CONCAT(c.first_name,' ',c.last_name)
FROM colonists AS c
JOIN travel_cards AS t ON c.id=t.colonist_id
WHERE t.job_during_journey='Pilot'
GROUP BY c.id
ORDER BY c.id;

//08.	Count all colonists that are on technical journey
SELECT COUNT(DISTINCT(c.id))
FROM colonists AS c
JOIN travel_cards AS t ON c.id=t.colonist_id
JOIN journeys AS j ON t.journey_id=j.id
WHERE j.purpose='Technical';

//09.Extract the fastest spaceship
SELECT s.name, p.name
FROM spaceships AS s
JOIN journeys AS j ON s.id=j.spaceship_id
JOIN spaceports AS p  ON j.destination_spaceport_id=p.id
WHERE s.id=(SELECT s.id
FROM spaceships AS s
ORDER BY s.light_speed_rate DESC LIMIT 1)
GROUP BY s.id;

//10.Extract spaceships with pilots younger than 30 years
на изпита:
(има ненужно условие, заради сбъркан тест :
с условието  AND(j.purpose='Military' OR j.purpose='Medical'  ),
заявката изкарва исканите 3 резултата, иначе са 4;
Но дори и с 4 резултата минава на 100)

SELECT s.name,s.manufacturer
FROM spaceships AS s
JOIN journeys AS j ON s.id=j.spaceship_id
JOIN travel_cards AS t ON j.id=t.journey_id
JOIN colonists AS c ON t.colonist_id=c.id
WHERE FLOOR(TIMESTAMPDIFF( YEAR,c.birth_date,'2019-01-02')) <30 AND t.job_during_journey='Pilot' 
AND(j.purpose='Military' OR j.purpose='Medical'  )
GROUP BY s.id
ORDER BY s.name;

//10 B
(изкарва 1 резултат повече от нулевия тест,но дава 100)
SELECT s.name,s.manufacturer
FROM spaceships AS s
JOIN journeys AS j ON s.id=j.spaceship_id
JOIN travel_cards AS t ON j.id=t.journey_id
JOIN colonists AS c ON t.colonist_id=c.id
WHERE TIMESTAMPDIFF( YEAR,c.birth_date,'2019-01-01') <30 AND t.job_during_journey='Pilot' 

GROUP BY s.id
ORDER BY s.name;

//11. Extract all educational mission planets and spaceports
SELECT p.name, sp.name
FROM planets AS p
JOIN spaceports AS sp ON p.id=sp.planet_id
JOIN journeys AS j ON sp.id=j.destination_spaceport_id
WHERE j.purpose='Educational'
GROUP BY p.name,sp.name
ORDER BY sp.name DESC;

//12. Extract all planets and their journey count
SELECT p.name,COUNT(j.id) AS con
FROM planets AS p
JOIN spaceports AS sp ON p.id=sp.planet_id
JOIN journeys AS j ON sp.id=j.destination_spaceport_id
GROUP BY p.id
ORDER BY con DESC,p.name;

//13.Extract the shortest journey
SELECT j.id,pl.name,p.name,j.purpose
FROM journeys AS j
JOIN spaceports AS p ON j.destination_spaceport_id=p.id
JOIN planets AS pl ON pl.id=p.planet_id
WHERE j.id=(SELECT j.id
FROM journeys  AS j
ORDER BY TIMESTAMPDIFF(SECOND,j.journey_start,j.journey_end)  
LIMIT 1);

//14.Extract the less popular job
SELECT t.job_during_journey
FROM travel_cards AS t
WHERE t.journey_id=(SELECT j.id
FROM journeys  AS j
ORDER BY TIMESTAMPDIFF(SECOND,j.journey_start,j.journey_end)  DESC
LIMIT 1)
GROUP BY t.job_during_journey
ORDER BY COUNT(t.job_during_journey) LIMIT 1;

//15. Get colonists count
CREATE FUNCTION udf_count_colonists_by_destination_planet  (planet_name VARCHAR(30) )
RETURNS INT
BEGIN

RETURN (SELECT COUNT(DISTINCT(t.colonist_id))
FROM planets AS p
JOIN spaceports AS sp ON p.id=sp.planet_id
JOIN journeys AS j ON sp.id=j.destination_spaceport_id
JOIN travel_cards AS t ON j.id=t.journey_id
WHERE p.name=planet_name);
END;

//16. Modify spaceship
CREATE PROCEDURE udp_modify_spaceship_light_speed_rate(
spaceship_name  VARCHAR(50),light_speed_rate_increse INT(11))
BEGIN
   
    		 IF NOT EXISTS (SELECT s.id
FROM spaceships AS s 
WHERE s.name=spaceship_name)   
     	THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Spaceship you are trying to modify does not exists.';   
    END IF; 
      
  UPDATE spaceships AS s
  SET s.light_speed_rate=s.light_speed_rate+light_speed_rate_increse
  WHERE s.name=spaceship_name;

END

