//1.	Table design

CREATE TABLE users(
id INT(11)  UNSIGNED PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(30) UNIQUE,
password VARCHAR(50) NOT NULL,
name VARCHAR(50),
gender VARCHAR(1),
birthdate DATETIME,
age INT(11) UNSIGNED,
email VARCHAR(50) NOT NULL
);

CREATE TABLE departments(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

CREATE TABLE employees(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(25) ,
last_name VARCHAR(25) ,
gender VARCHAR(1),
birthdate DATETIME ,
age INT(11) UNSIGNED,
department_id INT(11) UNSIGNED 
);

CREATE TABLE categories(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
department_id INT(11) UNSIGNED 
);

CREATE TABLE `status`(
id INT(11) UNSIGNED  PRIMARY KEY ,
label VARCHAR(30) NOT NULL
);


CREATE TABLE `reports` (
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
category_id INT(11) UNSIGNED ,
status_id INT(11) UNSIGNED ,
open_date DATETIME ,
close_date DATETIME,
description VARCHAR(200),
user_id INT(11) UNSIGNED ,
employee_id INT(11) UNSIGNED 
);

ALTER TABLE reports
ADD CONSTRAINT report_status_id
FOREIGN KEY reports(status_id) REFERENCES status(id),
ADD CONSTRAINT report_category_id
FOREIGN KEY reports(category_id) REFERENCES categories(id),
ADD CONSTRAINT report_employee_id
FOREIGN KEY reports(employee_id) REFERENCES employees(id),
ADD CONSTRAINT report_user_id
FOREIGN KEY reports(user_id) REFERENCES users(id);


ALTER TABLE categories
ADD CONSTRAINT category_department_id
FOREIGN KEY categories(department_id) REFERENCES departments(id);

ALTER TABLE employees
ADD CONSTRAINT employee_department_id
FOREIGN KEY employees(department_id) REFERENCES departments(id);

//2.	Insert
INSERT INTO employees (first_name,last_name,gender,
birthdate,department_id)
VALUES
('Marlo','O\'Malley','M','1958-9-21',1),
('Niki','Stanaghan','F','1969-11-26',4),
('Ayrton','Senna','M','1960-3-21',9),
('Ronnie','Peterson','M','1944-2-14',9),
('Giovanna','Amati','F','1959-7-20',5);

INSERT INTO reports (category_id,status_id,open_date,
close_date,description,user_id,employee_id )
VALUES
(1,1,'2017-4-13',NULL,'Stuck Road on Str.133',6,2),
(6,3,'2015-9-5','2015-12-6','Charity trail running',3,5),
(14,2,'2015-9-7',NULL,'Falling bricks on Str.58',5,2),
(4,3,'2017-7-3','2017-7-6','Cut off streetlight on Str.11',1,1);

//3.	Update
UPDATE reports
SET status_id=2
WHERE status_id=1 AND category_id =4;

//4.	Delete
DELETE FROM reports
WHERE status_id =4;

//5.	Users by Age
SELECT u.username, u.age
FROM users AS u
ORDER BY u.age,u.username DESC;

//6.	Unassigned Reports
SELECT r.description,r.open_date
FROM reports AS r
WHERE  ISNULL(r.employee_id)
ORDER BY r.open_date,r.description;

//7.	Employees & Reports
SELECT e.first_name,e.last_name,r.description,DATE_FORMAT(DATE(r.open_date),'%Y-%m-%d') AS open_date
FROM employees AS e
JOIN reports AS r ON r.employee_id=e.id
ORDER BY e.id,open_date,r.id;

//8.	Most reported Category
SELECT c.name,IFNULL(COUNT(r.id),0) AS number
FROM categories AS c
JOIN reports AS r ON r.category_id=c.id
GROUP BY c.id
ORDER BY number,c.name;

//9.	Employees in Category
SELECT c.name,IFNULL(COUNT(e.id),0) AS number
FROM categories AS c
Join departments AS d ON d.id=c.department_id
JOIN employees AS e ON e.department_id=d.id
GROUP BY c.id
ORDER BY c.name;

//10.	Birthday Report
SELECT c.name
FROM categories AS c
Join reports AS r ON r.category_id=c.id
JOIN users AS u ON u.id=r.user_id
WHERE DAY(u.birthdate)=DAY(r.open_date)
GROUP BY c.name
ORDER BY c.name;

//11.	Users per Employee 
SELECT CONCAT(e.first_name,' ',e.last_name) AS full_name,COUNT(DISTINCT(r.user_id)) AS users_count
FROM employees AS e
LEFT JOIN reports AS r ON r.employee_id=e.id
GROUP BY e.id
ORDER BY users_count DESC,full_name;

//12.	Emergency Patrol
SELECT r.open_date,r.description,u.email
FROM reports AS r
JOIN categories AS c ON r.category_id=c.id
JOIN departments AS d ON d.id=c.department_id
JOIN users AS u ON u.id=r.user_id
WHERE ISNULL(r.close_date) AND r.description LIKE '%str%'
AND CHAR_LENGTH(r.description)>20
AND d.name IN('Infrastructure' , 'Emergency', 'Roads Maintenance')
GROUP BY r.id
ORDER BY r.open_date,u.email,r.id;


//13.	Numbers Coincidence
SELECT u.username
FROM users AS u
JOIN reports AS r ON r.user_id=u.id
JOIN categories AS c ON c.id=r.category_id
WHERE (u.username REGEXP '^[0-9].*$' AND c.id LIKE SUBSTRING(u.username, 1, 1) ) OR
(u.username REGEXP '^.*[0-9]$' AND c.id LIKE RIGHT(u.username, 1))
GROUP BY u.username
ORDER BY u.username;


//14 A.	Open/Closed Statistics
SELECT CONCAT(e.first_name,' ',e.last_name) AS full_name, CONCAT_WS(CAST('/' AS CHAR),
 COUNT(IF(YEAR(r.close_date)=2016,1,NULL)),
 COUNT(IF(YEAR(r.open_date)=2016,1,NULL))
) AS closed_open_reports
FROM employees AS e
JOIN reports AS r ON r.employee_id=e.id
GROUP BY e.id
HAVING closed_open_reports!='0/0'
ORDER BY full_name;

//14 B.	Open/Closed Statistics
SELECT total.name, CONCAT_WS(CAST('/'AS CHAR),total.closed,total.open) AS closed_open_reports
FROM
(SELECT CONCAT(e.first_name,' ',e.last_name) AS name, 
 COUNT(IF(YEAR(r.close_date)=2016,1,NULL)) AS 'closed',
 COUNT(IF(YEAR(r.open_date)=2016,1,NULL)) AS 'open'
FROM employees AS e
JOIN reports AS r ON r.employee_id=e.id
GROUP BY e.id
HAVING closed!=0 OR open!=0
ORDER BY name) AS total;


//15.	Average Closing Time
SELECT d.name, 
CASE
	WHEN FLOOR(AVG(DATEDIFF(r.close_date,r.open_date))) = 0 THEN 'no info'
	WHEN ISNULL( FLOOR(AVG(DATEDIFF(r.close_date,r.open_date)))) THEN 'no info'
	ELSE  FLOOR(AVG(DATEDIFF(r.close_date,r.open_date)))
	END

FROM departments AS d
RIGHT JOIN categories AS c ON c.department_id=d.id
RIGHT JOIN reports AS r ON r.category_id=c.id
GROUP BY d.name
ORDER BY d.name;


//16.	Most Reported Category
SELECT d.name, c.name ,ROUND(COUNT(r.id)*100/
(SELECT COUNT(r2.id)
FROM departments AS d2
JOIN categories AS c2 ON c2.department_id=d2.id
JOIN reports AS r2 ON r2.category_id=c2.id
WHERE d.id=d2.id
GROUP BY d.id)) AS percentage
FROM departments AS d
JOIN categories AS c ON c.department_id=d.id
JOIN reports AS r ON r.category_id=c.id
GROUP BY c.id
ORDER BY d.name,c.name, percentage;


//17.	Get Reports 
DROP FUNCTION  IF EXISTS udf_get_reports_count;
DELIMITER $$
CREATE FUNCTION udf_get_reports_count(employee_id INT(11), status_id INT(11)) 
RETURNS INT
BEGIN

RETURN (SELECT COUNT(r.id)
FROM reports AS r
WHERE r.employee_id=employee_id AND r.status_id=status_id);

END $$

//18.	Assign Employee
DROP PROCEDURE  IF EXISTS usp_assign_employee_to_report;
DELIMITER $$
CREATE PROCEDURE usp_assign_employee_to_report(employee_id INT(11), report_id INT(11)) 
BEGIN
DECLARE employee_department_id INT DEFAULT (SELECT e.department_id
			FROM employees AS e
			WHERE e.id=employee_id);
DECLARE report_department_id INT DEFAULT (SELECT c.department_id
			FROM reports AS r
			JOIN categories AS c ON c.id=r.category_id
			WHERE r.id=report_id);

 START TRANSACTION;
 
 		 IF employee_department_id!=report_department_id
    
     	THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Employee doesn\'t belong to the appropriate department!';
    
    ROLLBACK;
    ELSE
    
    UPDATE reports AS r
SET r.employee_id=employee_id
WHERE r.id=report_id;

 COMMIT;
    END IF;   

END $$

//19.Close Reports
CREATE TRIGGER trig 
BEFORE UPDATE  
ON reports
FOR EACH ROW 
BEGIN
  IF NOT ISNULL(NEW.close_date)
     THEN
	SET NEW.status_id=3;
    END IF;  
END 


//20 a Categories Revision
SELECT c.name, COUNT(r.id),

CASE

WHEN (SELECT COUNT(r2.id)
FROM reports AS r2 
WHERE r2.status_id=1 AND r2.category_id=c.id
) >
(SELECT COUNT(r2.id)
FROM reports AS r2 
WHERE r2.status_id=2 AND r2.category_id=c.id
) THEN 'waiting'

WHEN (SELECT COUNT(r2.id)
FROM reports AS r2 
WHERE r2.status_id=1 AND r2.category_id=c.id
) <
(SELECT COUNT(r2.id)
FROM reports AS r2 
WHERE r2.status_id=2 AND r2.category_id=c.id
) THEN 'in progress'

ELSE 'equal'

END
FROM categories AS c
JOIN reports AS r ON r.category_id=c.id
WHERE r.status_id IN(1,2)
GROUP BY c.id
ORDER BY c.name;

//20 b Categories Revision
SELECT c.name, COUNT(r.id),
CASE
WHEN COUNT(IF(r.status_id=1,1,NULL)) > COUNT(IF(r.status_id=2,1,NULL))  THEN 'waiting'

WHEN COUNT(IF(r.status_id=1,1,NULL)) < COUNT(IF(r.status_id=2,1,NULL))  THEN 'in progress'

ELSE 'equal'
END

FROM categories AS c
JOIN reports AS r ON r.category_id=c.id
WHERE r.status_id IN(1,2)
GROUP BY c.id
ORDER BY c.name;