//1
CREATE TABLE users(
id INT(11) UNSIGNED KEY AUTO_INCREMENT,
username VARCHAR(30) UNIQUE NOT NULL,
`password` VARCHAR(50) NOT NULL,
name VARCHAR(50),
gender VARCHAR(1) NOT NULL,
birthdate DATETIME,
age INT(11) UNSIGNED,
email VARCHAR(50)
);

CREATE TABLE departments(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL
);

CREATE TABLE employees(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(25) ,
last_name VARCHAR(25) ,
gender VARCHAR(1) NOT NULL,
birthdate DATETIME,
age INT(11) UNSIGNED,
department_id INT(11) UNSIGNED,
CONSTRAINT fk_empl_dep
FOREIGN KEY (department_id) REFERENCES departments (id)
);

CREATE TABLE categories(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
department_id INT(11) UNSIGNED,
CONSTRAINT fk_cat_dep
FOREIGN KEY (department_id) REFERENCES departments (id)
);

CREATE TABLE `status`(
id INT(11) UNSIGNED PRIMARY KEY AUTO_INCREMENT,
label VARCHAR(30) NOT NULL
);

CREATE TABLE reports(
id INT(11)UNSIGNED PRIMARY KEY AUTO_INCREMENT,
category_id INT(11) UNSIGNED,
status_id INT(11) UNSIGNED,
open_date DATETIME,
close_date DATETIME,
description VARCHAR(200),
user_id INT(11) UNSIGNED NOT NULL,
employee_id INT(11) UNSIGNED,
CONSTRAINT fk_report_cat
FOREIGN KEY (category_id) REFERENCES categories (id),
CONSTRAINT fk_report_status
FOREIGN KEY (status_id) REFERENCES `status` (id),
CONSTRAINT fk_report_user
FOREIGN KEY (user_id) REFERENCES users (id),
CONSTRAINT fk_report_empl
FOREIGN KEY (employee_id) REFERENCES employees (id)
);

//2
INSERT INTO employees(first_name,last_name,gender,birthdate,department_id)
VALUES ('Marlo','O\'Malley','M','1958-09-21',1),

('Niki','Stanaghan','F','1969-11-26',4),

('Ayrton','Senna','M','1960-03-21',9),

('Ronnie','Peterson','M','1944-02-14',9),

('Giovanna','Amati','F','1959-07-20',5);

INSERT INTO reports(category_id,status_id,open_date,close_date,
description,user_id, employee_id)
VALUES (1,1,'2017-04-13',NULL,'Stuck Road on Str.133',6,2),

(6,3,'2015-09-05','2015-12-06','Charity trail running',3,5),

(14,2,'2015-09-07',NULL,'Falling bricks on Str.58',5,2),

(4,3,'2017-07-03','2017-07-06','Cut off streetlight on Str.11',1,1);

//3
UPDATE reports AS r
SET r.status_id=2
WHERE r.status_id=1 AND r.category_id=4;

//4
DELETE FROM  reports
WHERE status_id=4;

//5
SELECT u.username,u.age
FROM users AS u
ORDER BY u.age, u.username DESC;

//6
SELECT r.description,r.open_date
FROM reports AS r
WHERE ISNULL(r.employee_id)
ORDER BY r.open_date, r.description;

//7
SELECT e.first_name,e.last_name,r.description,DATE_FORMAT(r.open_date,'%Y-%m-%d')
FROM employees AS e
JOIN reports AS r ON e.id=r.employee_id
ORDER BY e.id,r.open_date,r.id;

//8
SELECT c.name, COUNT(r.id) AS num
FROM categories AS c
JOIN reports AS r ON c.id=r.category_id
GROUP BY c.id
ORDER BY num,c.name;

//9
SELECT c.name, COUNT(d.id) AS num
FROM categories AS c
LEFT JOIN departments AS d ON c.department_id=d.id
LEFT JOIN employees AS e ON d.id=e.department_id
GROUP BY c.id
ORDER BY c.name;

//10
SELECT c.name
FROM categories AS c
JOIN reports AS r ON c.id=r.category_id
JOIN users AS u ON r.user_id=u.id
WHERE DAY(u.birthdate)=DAY(r.open_date)
GROUP BY c.id
ORDER BY c.name;

//11
SELECT CONCAT_WS(' ',e.first_name,e.last_name) AS name, COUNT(DISTINCT(r.user_id)) AS users_count
FROM employees AS e
LEFT JOIN reports AS r ON e.id=r.employee_id
GROUP BY e.id
ORDER BY users_count DESC,name;

//12
SELECT r.open_date,r.description,u.email
FROM reports AS r
JOIN users AS u ON r.user_id=u.id
JOIN categories AS c ON r.category_id=c.id
WHERE ISNULL(r.close_date) AND CHAR_LENGTH(r.description)>20 
AND r.description LIKE '%str%'
AND c.department_id IN (1,4,5)
GROUP BY r.id
ORDER BY r.open_date, u.email,r.id;

//13
SELECT u.username
FROM users AS u
JOIN reports AS r ON r.user_id=u.id
JOIN categories AS c ON r.category_id=c.id
WHERE u.username LIKE CONCAT(c.id,'%') OR u.username LIKE CONCAT('%',c.id) 
GROUP BY u.id
ORDER BY u.username;

//14
SELECT w.name, CONCAT_WS('/',w.closed,w.open) 
FROM ( SELECT e.id,CONCAT_WS(' ',e.first_name,e.last_name) AS name,
  SUM(  IF(YEAR(r.open_date)<=2016 AND YEAR(r.close_date)=2016  ,1,0)  ) AS closed,
  SUM(  IF(YEAR(r.open_date)=2016  ,1,0)  ) AS `open`
FROM employees AS e
JOIN reports AS r ON e.id=r.employee_id
GROUP BY e.id
ORDER BY name
) AS w
WHERE w.closed >0 OR w.open >0;

//15
SELECT d.name , IFNULL(FLOOR(AVG(DATEDIFF(r.close_date,r.open_date))),'no info')
FROM departments AS d
JOIN categories AS c ON c.department_id=d.id
JOIN reports AS r ON c.id=r.category_id
GROUP BY d.id
ORDER BY d.name;

//16
SELECT d.name ,c.name, ROUND(COUNT(r.id)/(SELECT COUNT(r.id)
FROM reports AS r
JOIN categories AS c ON r.category_id=c.id
WHERE c.department_id=d.id)*100) AS per
FROM departments AS d
JOIN categories AS c ON c.department_id=d.id
JOIN reports AS r ON c.id=r.category_id
GROUP BY d.id,c.id
ORDER BY d.name, c.name, per;

//17
DROP FUNCTION  IF EXISTS udf_get_reports_count;
DELIMITER $$
CREATE FUNCTION udf_get_reports_count(employee_id  INT(11),status_id INT (11)) 
RETURNS INT
BEGIN

RETURN (SELECT COUNT(r.id)
FROM reports AS r 
WHERE r.employee_id=employee_id AND r.status_id=status_id);

END $$

//18
DROP PROCEDURE  IF EXISTS usp_assign_employee_to_report;
DELIMITER $$
CREATE PROCEDURE usp_assign_employee_to_report(employee_id INT(11), report_id INT (11)) 
BEGIN
 		 IF (SELECT e.department_id
FROM employees AS e
WHERE e.id=employee_id)  !=   (SELECT c.department_id
FROM reports AS r
JOIN categories AS c ON r.category_id=c.id
WHERE r.id=report_id
GROUP BY r.id)
    
     	THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Employee doesn\'t belong to the appropriate department!';
    END IF;  
	 
	 UPDATE reports AS r
	 SET r.employee_id=employee_id
	 WHERE r.id=report_id;

END $$

//19
DROP TRIGGER IF EXISTS trig ;

DELIMITER $$
CREATE TRIGGER trig 
BEFORE UPDATE 
ON reports
FOR EACH ROW 
BEGIN

IF (NOT ISNULL(NEW.close_date)) THEN

SET NEW.status_id=3;
END IF;

END  $$

//20
SELECT w.name, w.num,
CASE
WHEN w.waiting>w.progress THEN 'waiting'
WHEN w.waiting<w.progress THEN 'in progress'
ELSE 'equal'
END
FROM (SELECT c.name, COUNT(r.id) AS num,
 SUM(IF(r.status_id=1,1,0)) AS waiting,
 SUM(IF(r.status_id=2,1,0)) AS progress
FROM categories AS c
JOIN reports AS r ON c.id=r.category_id
WHERE r.status_id IN(1,2)
GROUP BY c.id
ORDER BY c.name) AS w;
