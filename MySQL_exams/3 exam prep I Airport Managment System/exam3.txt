CREATE DATABASE airport_management_system;
USE airport_management_system;

CREATE TABLE towns(
town_id INT(11) PRIMARY KEY,
town_name VARCHAR(30) NOT NULL
);
CREATE TABLE airports(
airport_id INT(11) PRIMARY KEY,
airport_name VARCHAR(50) NOT NULL,
town_id INT(11) NOT NULL
);
CREATE TABLE airlines(
airline_id INT(11) PRIMARY KEY,
airline_name VARCHAR(30) NOT NULL,
nationality VARCHAR(30) NOT NULL,
rating INT(11) DEFAULT 0
);
CREATE TABLE customers(
customer_id INT(11) PRIMARY KEY,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
date_of_birth DATE NOT NULL,
gender  VARCHAR(1) NOT NULL,
home_town_id INT(11) NOT NULL
);
CREATE TABLE flights(
flight_id INT(11) PRIMARY KEY AUTO_INCREMENT,
departure_time DATETIME NOT NULL,
arrival_time DATETIME NOT NULL,
`status`  VARCHAR(9) NOT NULL,
origin_airport_id INT(11) NOT NULL,
destination_airport_id INT(11) NOT NULL,
airline_id INT(11) NOT NULL
);
CREATE TABLE tickets(
ticket_id INT(11) PRIMARY KEY AUTO_INCREMENT,
price DECIMAL(8,2) NOT NULL,
class  VARCHAR(6) NOT NULL,
seat  VARCHAR(5) NOT NULL,
customer_id INT(11) NOT NULL,
flight_id INT(11) NOT NULL
);

ALTER TABLE flights
ADD CONSTRAINT flight_airline_id
FOREIGN KEY flights(airline_id) REFERENCES airlines(airline_id),
ADD CONSTRAINT flight_destination_airport_id
FOREIGN KEY flights(destination_airport_id) REFERENCES airports(airport_id),
ADD CONSTRAINT flight_origin_airport_id
FOREIGN KEY flights(origin_airport_id) REFERENCES airports(airport_id);

ALTER TABLE tickets
ADD CONSTRAINT ticket_flight_id
FOREIGN KEY tickets(flight_id) REFERENCES flights(flight_id),
ADD CONSTRAINT ticket_customer_id
FOREIGN KEY tickets(customer_id) REFERENCES customers(customer_id);

ALTER TABLE customers
ADD CONSTRAINT customer_town_id
FOREIGN KEY customers(home_town_id) REFERENCES towns(town_id);

ALTER TABLE airports
ADD CONSTRAINT airport_town_id
FOREIGN KEY airports(town_id) REFERENCES towns(town_id);

//2
INSERT INTO flights(departure_time,arrival_time ,`status`,origin_airport_id,
destination_airport_id,airline_id )
SELECT '2017-06-19 14:00:00' AS dep_time,
'2017-06-21 11:00:00' AS arrival_time,
IF (a.airline_id%4=0 , 'Departing',
IF(a.airline_id%4=1 ,'Delayed', IF(a.airline_id%4=2,'Arrived','Canceled') )  )AS 'status',
CEILING(SQRT(CHAR_LENGTH(a.airline_name))) AS orig_airport,
CEILING(SQRT(CHAR_LENGTH(a.nationality))) AS dest_airport,
 a.airline_id
FROM airlines AS a
WHERE a.airline_id<=10;

//3
UPDATE flights
SET airline_id =1
WHERE 	`status`='Arrived';

//4
UPDATE tickets AS t
JOIN flights AS f ON t.flight_id=f.flight_id
JOIN airlines AS a ON f.airline_id=a.airline_id
SET t.price=t.price*1.50
WHERE 	a.airline_id=(SELECT al.airline_id
FROM airlines AS al
ORDER BY al.rating DESC LIMIT 1);

//5
SELECT t.ticket_id,t.price,t.class,t.seat
FROM tickets AS t
ORDER BY t.ticket_id;

//6
SELECT c.customer_id,CONCAT(c.first_name,' ',c.last_name) AS full_name,
c.gender
FROM customers AS c
ORDER BY full_name, c.customer_id;

//7
SELECT f.flight_id,f.departure_time,f.arrival_time
FROM flights AS f
WHERE f.`status`='Delayed';

//8
SELECT a.airline_id,a.airline_name,a.nationality,a.rating
FROM airlines AS a
JOIN flights AS f ON a.airline_id=f.airline_id
GROUP BY a.airline_id
ORDER BY a.rating DESC, a.airline_id LIMIT 5;

//9
SELECT t.ticket_id, a.airport_name,(SELECT CONCAT(c.first_name,' ',c.last_name)
FROM customers AS c
WHERE c.customer_id=t.customer_id) AS customer_name
FROM tickets AS t
JOIN flights AS f On t.flight_id=f.flight_id
JOIN airports AS a ON a.airport_id=f.destination_airport_id
WHERE t.price<5000 AND t.class='First';

//10
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name), (
SELECT tn.town_name FROM towns AS tn WHERE tn.town_id=c.home_town_id)
FROM customers AS c
JOIN tickets AS t ON c.customer_id=t.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
JOIN airports AS a ON f.origin_airport_id=a.airport_id
WHERE a.town_id=c.home_town_id AND f.`status`='Departing'
GROUP BY c.customer_id
ORDER BY c.customer_id;

//11
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name),
2016-YEAR(c.date_of_birth) AS age
FROM customers AS c
JOIN tickets AS t ON c.customer_id=t.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
WHERE  f.`status`='Departing'
GROUP BY c.customer_id
ORDER BY age , c.customer_id;

//12
SELECT c.customer_id,CONCAT(c.first_name,' ',c.last_name),
(SELECT t2.price FROM tickets AS t2 
JOIN flights AS f3 ON t2.flight_id=f3.flight_id
WHERE c.customer_id =t2.customer_id  AND f3.`status`='Delayed'
ORDER BY t2.price DESC LIMIT 1) AS price,

(SELECT a2.airport_name
FROM airports AS a2
JOIN flights AS f2 ON a2.airport_id=f2.destination_airport_id
JOIN tickets AS t2 ON t2.flight_id=f2.flight_id
WHERE t2.ticket_id =
 (
 SELECT t3.ticket_id FROM tickets AS t3 
 JOIN flights AS f4 ON t3.flight_id=f4.flight_id
 WHERE c.customer_id =t3.customer_id  AND f4.`status`='Delayed'
 ORDER BY t3.price DESC LIMIT 1
 )) AS destination
FROM customers AS c
JOIN tickets AS t ON c.customer_id=t.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
WHERE f.`status`='Delayed'
GROUP BY c.customer_id
ORDER BY price DESC,c.customer_id LIMIT 3;

//13
SELECT f.flight_id, f.departure_time,f.arrival_time,
a.airport_name, a2.airport_name
FROM flights AS f
JOIN airports AS a ON f.origin_airport_id=a.airport_id
JOIN airports AS a2 ON f.destination_airport_id=a2.airport_id
WHERE f.`status`='departing' AND f.departure_time IN (SELECT * FROM

(SELECT  f.departure_time
FROM flights AS f
JOIN airports AS a ON f.origin_airport_id=a.airport_id
JOIN airports AS a2 ON f.destination_airport_id=a2.airport_id
WHERE f.`status`='departing'
ORDER BY f.departure_time DESC LIMIT 5
) As rt)
ORDER BY f.departure_time, f.flight_id LIMIT 5;


//14
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name) AS full_name,
2016-YEAR(c.date_of_birth) AS age
FROM customers AS c
JOIN tickets AS t ON c.customer_id=t.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
WHERE 2016-YEAR(c.date_of_birth)<21 AND f.`status`='Arrived'
GROUP BY c.customer_id
ORDER BY age DESC, c.customer_id;

//15
SELECT a.airport_id,a.airport_name,COUNT(c.customer_id) AS passengers
FROM airports AS a
JOIN flights AS f On f.origin_airport_id=a.airport_id
JOIN tickets AS t ON t.flight_id=f.flight_id
JOIN customers AS c ON c.customer_id=t.customer_id
WHERE f.`status`='Departing'
GROUP BY a.airport_id;

//16
DELIMITER $$
CREATE PROCEDURE udp_submit_review(
customer_id INT(11),
review_content VARCHAR(255),
review_grade INT(11),
airline_name VARCHAR(30)
)
BEGIN
	    IF NOT EXISTS (SELECT a.airline_id FROM airlines AS a WHERE a.airline_name=airline_name)
    THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Airline does not exist.';
    END IF;
    
    INSERT INTO customer_reviews (review_content,review_grade,airline_id, customer_id) 
    SELECT review_content, review_grade,
	  (SELECT a.airline_id FROM airlines AS a WHERE a.airline_name=airline_name), customer_id;

END $$

//17
DELIMITER $$
CREATE PROCEDURE udp_purchase_ticket(
customer_id INT(11),flight_id INT(11), ticket_price DECIMAL(8,2),
class VARCHAR(6), seat VARCHAR(5)
)
BEGIN

	 IF  (SELECT ca.balance FROM customer_bank_accounts AS ca WHERE ca.customer_id=customer_id)<ticket_price
    THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Insufficient bank account balance for ticket purchase.';
    END IF;
    
    UPDATE customer_bank_accounts AS c
    SET balance=balance-ticket_price
    WHERE c.customer_id=customer_id;
    
    INSERT INTO tickets (price, class, seat,customer_id, flight_id)
    SELECT ticket_price, class, seat, customer_id ,flight_id;

END $$

//18
DELIMITER $$
CREATE TRIGGER update_flight_status
BEFORE UPDATE
ON flights
FOR EACH ROW

BEGIN

IF NEW.status='Arrived' AND( OLD.status='Departing' OR OLD.status='Delayed')  THEN


INSERT INTO arrived_flights (flight_id,arrival_time,origin,destination,passengers)

VALUES (OLD.flight_id, OLD.arrival_time,
 (SELECT a.airport_name FROM airports AS a WHERE a.airport_id=OLD.origin_airport_id),
 (SELECT a.airport_name FROM airports AS a WHERE a.airport_id=OLD.destination_airport_id),
 (SELECT  COUNT(t.ticket_id)
	FROM flights AS f
	JOIN tickets AS t ON t.flight_id=f.flight_id
	WHERE f.flight_id=OLD.flight_id) );
	
	END IF;


END $$

