CREATE TABLE towns(
town_id INT(11) PRIMARY KEY AUTO_INCREMENT,
town_name VARCHAR(30) NOT NULL
);

CREATE TABLE airports(
airport_id INT(11) PRIMARY KEY AUTO_INCREMENT,
airport_name VARCHAR(50) NOT NULL,
town_id INT(11) NOT NULL,
CONSTRAINT fk_airport_town_id
FOREIGN KEY (town_id) REFERENCES towns(town_id)
);

CREATE TABLE airlines(
airline_id INT(11) PRIMARY KEY AUTO_INCREMENT,
airline_name VARCHAR(30) NOT NULL,
nationality VARCHAR(30) NOT NULL,
rating INT(11) NOT NULL DEFAULT 0
);

CREATE TABLE customers(
customer_id INT(11) PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
date_of_birth DATE NOT NULL,
gender VARCHAR(1) NOT NULL,
home_town_id INT(11) NOT NULL,
CONSTRAINT fk_customer_town_id
FOREIGN KEY (home_town_id) REFERENCES towns(town_id)
);

CREATE TABLE flights(
flight_id INT(11) PRIMARY KEY AUTO_INCREMENT,
departure_time DATETIME NOT NULL,
arrival_time DATETIME NOT NULL,
`status` VARCHAR(9) NOT NULL,
origin_airport_id INT(11) NOT NULL,
destination_airport_id INT(11) NOT NULL,
airline_id INT(11) NOT NULL,
CONSTRAINT fk_flight_origin_id
FOREIGN KEY (origin_airport_id) REFERENCES airports(airport_id),
CONSTRAINT fk_flight_dest_id
FOREIGN KEY (destination_airport_id) REFERENCES airports(airport_id),
CONSTRAINT fk_flight_airline_id
FOREIGN KEY (airline_id) REFERENCES airlines(airline_id)
);

CREATE TABLE tickets(
ticket_id INT(11) PRIMARY KEY AUTO_INCREMENT,
price DECIMAL(8,2) NOT NULL,
class VARCHAR(6) NOT NULL,
seat VARCHAR(5) NOT NULL,
customer_id INT(11) NOT NULL,
flight_id INT(11) NOT NULL,
CONSTRAINT fk_ticket_customer_id
FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
CONSTRAINT fk_ticket_flight_id
FOREIGN KEY (flight_id) REFERENCES flights(flight_id)
);

//2
INSERT INTO flights (departure_time,arrival_time ,`status`,
origin_airport_id , destination_airport_id ,airline_id )

(SELECT '2017-06-19 14:00:00', '2017-06-21 11:00:00',
CASE
WHEN a.airline_id%4=0 THEN 'Departing'
WHEN a.airline_id%4=1 THEN 'Delayed'
WHEN a.airline_id%4=2 THEN 'Arrived'
WHEN a.airline_id%4=3 THEN 'Canceled'
END,
CEIL(SQRT(CHAR_LENGTH(a.airline_name))),
CEIL(SQRT(CHAR_LENGTH(a.nationality))),
a.airline_id
FROM airlines AS a
WHERE a.airline_id BETWEEN 1 AND 10);

//3
UPDATE flights 
SET airline_id =1
WHERE `status`='Arrived';

//4
UPDATE tickets 
SET price =price*1.5
WHERE ticket_id IN (SELECT * FROM(SELECT t.ticket_id
FROM tickets AS t
JOIN flights AS f ON f.flight_id=t.flight_id
JOIN airlines AS a ON a.airline_id=f.airline_id
WHERE a.airline_id=(SELECT a.airline_id
FROM airlines AS a
ORDER BY a.rating DESC LIMIT 1) ) AS w);

//5
SELECT t.ticket_id,t.price,t.class,t.seat
FROM tickets AS t;

//6
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name) AS full_name,
c.gender
FROM customers  AS c
ORDER BY full_name, c.customer_id;

//7
SELECT f.flight_id,f.departure_time,f.arrival_time
FROM flights  AS f
WHERE f.`status`='Delayed'
ORDER BY f.flight_id;

//8
SELECT a.airline_id,a.airline_name,a.nationality,a.rating
FROM airlines  AS a
JOIN flights AS f ON a.airline_id=f.airline_id
GROUP BY a.airline_id
ORDER BY a.rating DESC,a.airline_id LIMIT 5;

//9
SELECT t.ticket_id,a.airport_name,CONCAT(c.first_name,' ',c.last_name)
FROM tickets AS t
JOIN flights AS f ON f.flight_id=t.flight_id
JOIN airports AS a ON f.destination_airport_id=a.airport_id
JOIN customers AS c ON t.customer_id=c.customer_id
WHERE t.price<5000 AND t.class='First'
GROUP BY t.ticket_id 
ORDER BY t.ticket_id;

//10
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name), tow.town_name
FROM customers AS c
JOIN tickets AS t ON t.customer_id=c.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
JOIN airports AS a ON a.airport_id=f.origin_airport_id
JOIN towns AS tow ON a.town_id=tow.town_id
WHERE c.home_town_id=a.town_id AND f.`status`='Departing'
GROUP BY c.customer_id
ORDER BY c.customer_id;

//11
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name),2016-YEAR(c.date_of_birth) AS age
FROM customers AS c
JOIN tickets AS t ON t.customer_id=c.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id

WHERE f.`status`='Departing'
GROUP BY c.customer_id
ORDER BY age, c.customer_id;

//12
SELECT c.customer_id, CONCAT(c.first_name,' ',c.last_name),MAX(t.price) AS price,
a.airport_name
FROM customers AS c
JOIN tickets AS t ON t.customer_id=c.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
JOIN airports AS a ON f.destination_airport_id=a.airport_id

WHERE f.`status`='Delayed'
GROUP BY c.customer_id
ORDER BY price DESC, c.customer_id LIMIT 3;

//13
SELECT f.flight_id,f.departure_time,f.arrival_time,a.airport_name,a2.airport_name
FROM flights AS f
JOIN airports AS a ON a.airport_id=f.origin_airport_id
JOIN airports AS a2 ON a2.airport_id=f.destination_airport_id
WHERE f.flight_id IN (SELECT * FROM(SELECT f.flight_id
FROM flights AS f
JOIN airports AS a ON a.airport_id=f.origin_airport_id
JOIN airports AS a2 ON a2.airport_id=f.destination_airport_id
WHERE f.`status`='Departing'
GROUP BY f.flight_id
ORDER BY f.departure_time DESC LIMIT 5) AS w )
GROUP BY f.flight_id
ORDER BY f.departure_time  LIMIT 5 ;

//14
SELECT c.customer_id,CONCAT(c.first_name,' ',c.last_name),2016-YEAR(c.date_of_birth) AS `age`
FROM customers AS c
JOIN tickets AS t ON t.customer_id=c.customer_id
JOIN flights AS f ON f.flight_id=t.flight_id
WHERE 2016-YEAR(c.date_of_birth) <21 AND f.`status`='Arrived'
GROUP BY c.customer_id
ORDER BY age DESC, c.customer_id;

//15
SELECT a.airport_id,a.airport_name,COUNT(t.ticket_id)
FROM airports AS a
JOIN flights AS f ON a.airport_id=f.origin_airport_id
JOIN tickets AS t ON f.flight_id=t.flight_id
WHERE f.`status`='Departing'
GROUP BY a.airport_id
ORDER BY a.airport_id;

//16
CREATE PROCEDURE udp_submit_review(
customer_id INT(11),review_content VARCHAR(255), 
 review_grade INT(11),airline_name VARCHAR(30))
BEGIN
 DECLARE  airlin_id  INT DEFAULT 0 ;
    
     IF NOT EXISTS (SELECT a.airline_id FROM airlines AS a WHERE a.airline_name=airline_name)
   
     THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Airline does not exist.';
    END IF;
    
  
 SET airlin_id  = (SELECT a.airline_id FROM airlines AS a WHERE a.airline_name=airline_name);


		INSERT INTO customer_reviews (review_content,review_grade,airline_id,customer_id)
		SELECT review_content, review_grade,airlin_id ,customer_id;

END

//17
DROP PROCEDURE IF EXISTS udp_purchase_ticket;
DELIMITER $$
CREATE PROCEDURE udp_purchase_ticket(
customer_id INT(11),flight_id INT(11), 
 ticket_price DECIMAL(8,2),class VARCHAR(6),seat VARCHAR(5))
BEGIN
 DECLARE  customer_balance  DECIMAL(10,2) DEFAULT 0 ;
 
 SET customer_balance= (SELECT cba.balance
FROM customer_bank_accounts AS cba
WHERE cba.customer_id=customer_id);
    
     IF (customer_balance<ticket_price)        THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Insufficient bank account balance for ticket purchase.';
    END IF;
    
  UPDATE customer_bank_accounts AS c
  SET balance =balance -ticket_price
  WHERE c.customer_id=customer_id;

		INSERT INTO tickets(price, `class`,seat,customer_id,flight_id)
		SELECT ticket_price,`class`,seat,customer_id,flight_id;


END $$

//18