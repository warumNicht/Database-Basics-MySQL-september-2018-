
1.	Employees with Salary Above 35000
DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above_35000 ()
BEGIN
SELECT e.first_name, e.last_name
FROM employees AS e
WHERE e.salary>35000
ORDER BY e.first_name,e.last_name;
END $$

2.	Employees with Salary Above Number
DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above (number DECIMAL(19,4)) // or DOUBLE
BEGIN
SELECT e.first_name, e.last_name
FROM employees AS e
WHERE e.salary>=number
ORDER BY e.first_name,e.last_name;
END $$

3.	Town Names Starting With
DELIMITER $$
CREATE PROCEDURE usp_get_towns_starting_with  (pattern VARCHAR(30))
BEGIN
SELECT t.name
FROM towns AS t
WHERE t.name LIKE CONCAT(pattern,'%')
ORDER BY t.name;
END $$

4.	Employees from Town
DELIMITER $$
CREATE PROCEDURE usp_get_employees_from_town (town VARCHAR(30))
BEGIN
SELECT e.first_name, e.last_name
FROM employees AS e
JOIN addresses AS a ON e.address_id=a.address_id
JOIN towns AS t ON t.town_id=a.town_id
WHERE t.name=town
ORDER BY e.first_name,e.last_name;
END $$

5.	Salary Level Function
DELIMITER $$
CREATE FUNCTION ufn_get_salary_level(empl_salary double)
 RETURNS VARCHAR(10)
    
BEGIN
    DECLARE lvl varchar(10);
 
    IF empl_salary < 30000 THEN
 SET lvl = 'Low';
    ELSEIF (empl_salary <= 50000 ) THEN
        SET lvl = 'Average';
    ELSEIF empl_salary >50000  THEN
        SET lvl = 'High';
    END IF;
 
 RETURN (lvl);
END $$

//SELECT e.salary, fn_get_salary_level(e.salary) AS sal
//FROM employees AS e;

6.	Employees by Salary Level
//100/100
DELIMITER $$
CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(10))
BEGIN
SELECT e.first_name,e.last_name
FROM employees AS e
WHERE ufn_get_salary_level(e.salary)=salary_level
ORDER BY e.first_name DESC,e.last_name DESC;
END $$

//CALL usp_get_employees_by_salary_level('high');

// 100/100
CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(10))
BEGIN
SELECT e.first_name,e.last_name
FROM employees AS e

WHERE e.salary<30000 AND salary_level='Low' OR
		e.salary<=50000 AND e.salary>=30000  AND salary_level ='Average' OR
		e.salary>50000 AND salary_level='High'

ORDER BY e.first_name DESC ,e.last_name DESC;
END

7.	Define Function
DELIMITER $$
CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))  
RETURNS INT
BEGIN
 IF  word REGEXP CONCAT('^[',set_of_letters,']+$') THEN RETURN 1;
 ELSE RETURN 0;
 END IF;
END $$

//SELECT soft_uni.ufn_is_word_comprised('oistmiahf', 'Sofia');


9.	Find Full Name
DELIMITER $$
CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
SELECT CONCAT(a.first_name, ' ',a.last_name) AS `full_name`
FROM account_holders AS a
ORDER BY a.first_name;
END $$

//CALL usp_get_holders_full_name();

10.	People with Balance Higher Than
DELIMITER $$
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(given_amount DECIMAL(19, 4))
BEGIN
SELECT a.first_name,a.last_name
FROM account_holders AS a
JOIN accounts AS d ON d.account_holder_id =a.id
GROUP BY a.first_name
HAVING SUM(d.balance)>given_amount
ORDER BY d.id;
END $$

11.	Future Value Function
DELIMITER $$
CREATE FUNCTION ufn_calculate_future_value(init_sum DECIMAL(20,2), rate DOUBLE, years INT)
RETURNS DOUBLE (20,11)
BEGIN
	RETURN init_sum*( POW( (1.0+rate ) , years ));
END $$

//SELECT ufn_calculate_future_value(1000.55, 0.08, 5);


11.	Calculating Interest
CREATE FUNCTION ufn_calculate_future_value(init_sum DECIMAL(20,4), rate DOUBLE, years INT)
RETURNS DECIMAL (20,4)
BEGIN
	RETURN init_sum*( POW( (1.0+rate ) , years ) );
END;

CREATE PROCEDURE usp_calculate_future_value_for_account(wanted_id INT, interest DECIMAL(20,4))
BEGIN
SELECT c.id, a.first_name, a.last_name,c.balance AS current_balance,
ROUND(ufn_calculate_future_value(c.balance, interest, 5.0),4) AS balance_in_5_years
FROM accounts AS c

JOIN account_holders AS a ON a.id=c.account_holder_id
WHERE c.id=wanted_id;
END

12.	Deposit Money
DELIMITER $$
CREATE PROCEDURE usp_deposit_money(account_id INT, money_amount DECIMAL) 
BEGIN

START TRANSACTION;

	IF((SELECT count(id) FROM accounts WHERE id like account_id)<>1 OR ISNULL (money_amount)) 
 THEN ROLLBACK;
ELSE 
UPDATE accounts AS ac
SET ac.balance=ac.balance+ROUND(money_amount,2)
WHERE ac.id=account_id;
COMMIT;
END IF;
END  $$

13.	Withdraw Money
DELIMITER $$
CREATE PROCEDURE usp_withdraw_money(account_id INT, money_amount DECIMAL(20,4)) 
BEGIN
START TRANSACTION;
IF money_amount<=0 OR (SELECT a.balance FROM accounts AS a WHERE a.id=account_id)<money_amount THEN ROLLBACK ;
ELSE 
UPDATE accounts AS ac
SET ac.balance=ac.balance-money_amount
WHERE ac.id=account_id;
COMMIT;
END IF;
END $$

CALL usp_withdraw_money(1,10);

14.	Money Transfer
DROP   PROCEDURE IF EXISTS usp_transfer_money;

DELIMITER $$
CREATE PROCEDURE usp_transfer_money(from_account_id INT, to_account_id INT, amount DECIMAL(20,4))  
BEGIN
START TRANSACTION;

IF amount<=0 OR from_account_id=to_account_id 

OR  (SELECT a.balance FROM accounts AS a WHERE a.id=from_account_id)<amount THEN ROLLBACK ;
ELSE 
UPDATE accounts AS ac
SET ac.balance=ac.balance+amount
WHERE ac.id=to_account_id;
UPDATE accounts AS ac
SET ac.balance=ac.balance-amount
WHERE ac.id=from_account_id;
IF NOT EXISTS (SELECT 'False' FROM accounts AS a WHERE a.id=from_account_id) THEN ROLLBACK ;
END IF;
IF NOT EXISTS (SELECT 'False' FROM accounts AS a WHERE a.id=to_account_id) THEN ROLLBACK ;
END IF;
END IF;

END $$

//CALL usp_transfer_money(1,2,10.00);


15.	Log Accounts Trigger
CREATE TABLE `logs`(
log_id INT PRIMARY KEY AUTO_INCREMENT,
account_id INT NOT NULL,
old_sum DECIMAL(19,4) NOT NULL,
new_sum DECIMAL(19,4) NOT NULL
);
DELIMITER $$
CREATE TRIGGER tr_deleted_employees
AFTER UPDATE
ON accounts 
FOR EACH ROW
BEGIN
INSERT INTO `logs` (account_id,old_sum ,new_sum)
VALUES (OLD.id,OLD.balance, NEW.balance);

END $$

16.	Emails Trigger
CREATE TABLE `logs`(
log_id INT PRIMARY KEY AUTO_INCREMENT,
account_id INT NOT NULL,
old_sum DECIMAL(19,4) NOT NULL,
new_sum DECIMAL(19,4) NOT NULL
);

CREATE TRIGGER tr_deleted_employees
AFTER UPDATE
ON accounts 
FOR EACH ROW
BEGIN
INSERT INTO `logs` (log_id,account_id,old_sum ,new_sum)
VALUES (OLD.id, OLD.id,OLD.balance, NEW.balance);

END;


CREATE TABLE notification_emails(
id INT PRIMARY KEY AUTO_INCREMENT,
recipient INT NOT NULL,
subject VARCHAR(40) NOT NULL, 
body VARCHAR(90) NOT NULL);


CREATE TRIGGER send_email
AFTER INSERT
ON `logs` 
FOR EACH ROW
BEGIN
	INSERT INTO notification_emails(recipient,subject,body)
	VALUES (NEW.account_id, 
	CONCAT('Balance change for account: ',NEW.account_id),
	CONCAT('On ',DATE_FORMAT(NOW(),'%b %d %Y at %h:%i:%s %p'),' your balance was changed from ',
	ROUND(NEW.old_sum,2),' to ', ROUND(NEW.new_sum,2),'.'));
END;
